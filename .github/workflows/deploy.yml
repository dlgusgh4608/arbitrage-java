# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Arbitrage-java-deploy-action

on:
  push:
    branches: [ "main" ]

env:
  BUILD_FILE: arbitrage-java-0.0.1.jar
  S3_BUCKET: arbitrage-java-bucket
  CODEDEPLOY_APP: arbitrage-code-deploy
  CODEDEPLOY_GROUP: arbitrage-code-deploy-group


permissions:
  id-token: write  # OIDC 필수 권한
  contents: read
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: JDK17 셋업
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

      # https://github.com/marketplace/actions/build-with-gradle
    - name: Gradle셋업
      uses: gradle/actions/setup-gradle@v4

      # https://github.com/marketplace/actions/setup-redis-with-password
      # Redis의 env 기본값을 넣음
    - name: Redis셋업
      uses: getong/redis-action@v1
      with:
        redis version: 'latest'
        host port: 6379
        container port: 6379
        redis password: '123456'

      # https://github.com/marketplace/actions/setup-postgresql
      # postgreSQL의 env 기본값을 넣음
    - name: PG셋업
      uses: harmon758/postgresql-action@v1
      with:
        postgresql version: '16'
        postgresql db: 'postgres'
        postgresql user: 'postgres'
        postgresql password: '5432'

    - name: Gradle 권한 변경 및 빌드
      run: chmod +x ./gradlew && ./gradlew clean build

      # https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions
    - name: AWS CLI 셋업
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::430118849354:role/HelloWorld@GithubAction_with_OIDC_from_Arbitrage-Java
        aws-region: ap-northeast-2

    - name: S3로 업로드
      run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          aws s3 cp build/libs/${{ env.BUILD_FILE }} s3://${{ env.S3_BUCKET }}/builds/$TIMESTAMP/

    - name: CodeDeploy 트리거
      run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APP }} \
            --deployment-group-name ${{ env.CODEDEPLOY_GROUP }} \
            --s3-location bucket=${{ env.S3_BUCKET }},bundleType=zip,key=builds/$TIMESTAMP/${{ env.BUILD_FILE }}




    # 아래는 Github에서 주는 기본 예시인데 혹시몰라서 안지움
    # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
    # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
    #
    # - name: Setup Gradle
    #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    #   with:
    #     gradle-version: '8.9'
    #
    # - name: Build with Gradle 8.9
    #   run: gradle build

  # dependency-submission:

  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write

  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'

  #   # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
  #   # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
  #   - name: Generate and submit dependency graph
  #     uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
